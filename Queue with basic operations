package com.example.demo;

public class SimpleQueue {

    //Declaring end points
    int front, size, rear, capacity;
    int arr[];

    //Constructor
    public SimpleQueue(int capacity) {
        this.capacity = capacity;
        this.front = this.size = 0;
        this.rear = capacity - 1;
        this.arr = new int[this.capacity];
    }

    //Method to enqueue an element
    public void enqueue(int item) {
        if (isFull(this))
            return;

        this.rear = (this.rear+1)%this.capacity;
        this.arr[this.rear]=item;
        this.size = this.size+1;
    }

     //Checking if queue is increasing beyond capacity
     boolean isFull(SimpleQueue queue) {
        return  (queue.size == queue.capacity);
    }

    public static void main(String[] args) {

        SimpleQueue q = new SimpleQueue(4);

        //Adding elements
        q.enqueue(10);
        q.enqueue(20);
        q.enqueue(30);
        q.enqueue(40);

        //Retrieving an element
        System.out.println(q.dequeue());
        
        //Retrieving front element
        System.out.println(q.front());
        
        //Retrieving rear element
        System.out.println(q.rear());
    }

     //Method to retrieve rear element
     int rear() {
        //Check if queue is empty
        if (isEmpty(this))
            return Integer.MIN_VALUE;

        return this.arr[this.rear];
    }

    //Method to retrieve front element
    int front() {
        //Check if queue is empty
        if (isEmpty(this))
            return Integer.MIN_VALUE;

        return this.arr[this.front];
    }
  
    //Method to retrieve an element
    int dequeue() {
        if (isEmpty(this))
            return Integer.MIN_VALUE;

        int item = this.arr[this.front];
        this.size = this.size-1;
        this.front = (this.front+1)%this.capacity;

        return item;
    }

    //Method to check if queue has any element
    boolean isEmpty(SimpleQueue queue) {
        return (queue.size == 0);
    }
}
